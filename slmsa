"use client";

import React, { useState, useEffect } from "react";
import { Expenses, Budgets } from "../../../../../utils/schema";
import { Button } from "/components/ui/button";
import { Input } from "/components/ui/input";
import { db } from "../../../../../utils/dbConfig";
import { toast } from "sonner";
import { Loader } from "lucide-react";
import moment from "moment";

function AddExpense({ budgetId, user, refreshData }) {
  const [name, setName] = useState("");
  const [amount, setAmount] = useState("");
  const [loading, setLoading] = useState(false);
  const [totalBudget, setTotalBudget] = useState(0);

  // Fetch the total budget amount
  useEffect(() => {
    const fetchBudget = async () => {
      try {
        const budget = await db
          .select()
          .from(Budgets)
          .where({ id: budgetId })
          .single();

        if (budget) {
          setTotalBudget(Number(budget.amount)); // Ensure totalBudget is a number
        }
      } catch (error) {
        console.error("Error fetching budget:", error);
      }
    };
    fetchBudget();
  }, [budgetId]);

  // Use to add new expense
  const addNewExpense = async () => {
    const numericAmount = parseFloat(amount);

    console.log("Amount entered:", numericAmount);
    console.log("Total budget:", totalBudget);

    if (numericAmount > totalBudget) {
      toast.error("Entered amount exceeds the total budget amount");
      return;
    }

    setLoading(true);
    try {
      const result = await db
        .insert(Expenses)
        .values({
          name: name,
          amount: numericAmount, // Ensure amount is a number
          budgetId: budgetId,
          createdAt: moment().format("DD/MM/yyyy HH:mm:ss"),
        })
        .returning({ insertedId: Budgets.id });

      setAmount("");
      setName("");

      if (result) {
        setLoading(false);
        refreshData();
        toast.success("Expense Created Successfully");
      } else {
        toast.error("Expense Creation Failed");
      }
    } catch (error) {
      toast.error("Expense Creation Failed");
    }
    setLoading(false);
  };

  return (
    <div className="p-5 border rounded-lg hover:shadow-md cursor-pointer">
      <h2 className="font-bold text-lg">Add Expense</h2>
      <div className="mt-2">
        <h2 className="text-black font-medium my-1">Expense Name</h2>
        <Input
          value={name}
          placeholder="Enter expense name"
          onChange={(e) => setName(e.target.value)}
        />
      </div>
      <div className="mt-2">
        <h2 className="text-black font-medium my-1">Expense Amount</h2>
        <Input
          value={amount}
          placeholder="Enter expense amount"
          type="number"
          onChange={(e) => setAmount(e.target.value)}
        />
      </div>

      <Button
        className="mt-5 relative bg-amber-900"
        disabled={!(name && amount) || loading}
        onClick={() => addNewExpense()}
      >
        {loading ? (
          <Loader className="animate-spin" size={20} />
        ) : (
          "Add New Expense"
        )}
      </Button>
    </div>
  );
}

export default AddExpense;
